 var langEn = {
     FG:
     {
         chart: 'Chart',
         newChart: 'New Chart',
         form: 'Form',
         newForm: 'New Form',
         newButton: 'New Button',
         newInput: 'New Input',
         newDropDown: 'New DropDown',
         newComboSearch: 'New Combo Search',
         listItemDefault: '-- select one --',
         ListItemOne: 'select 1',
         ListItemTwo: 'select 2',
         RadioItemOne: 'option 1',
         RadioItemTwo: 'option 2',
         newRadionButtonList: 'New Radio Button List',
         newDataGrid: 'New Table',
         newCheckBoxList: 'New CheckBox List',
         newCheckBox: 'New CheckBox',
         newFileUpload: 'new File Uploader',
         notPermittedFiles: 'The type of files selected is not allowed!',
         pickFile: 'File Selection',
         isFooterName:'is Footer?',
         newImage: 'New Image',
         newWordCaptcha: 'New Word Problem',
         wordCaptchaLength: 'Character Length',
         dataGrid: 'Table',
         newDataGrid: 'New table',
         dataGridFirstColumn: 'column one',
         dataGridSecondColumn: 'column two',
         downloadLink: 'Download Link',
         newDownloadLink: 'Download',
         link: 'Link',
         newLink: 'New Link',
         newTitle: 'New title',
         newDatePicker: 'New DatePicker',
         newCkeditor: 'New Editor',
         defaultContentHtmlCode: 'Use editing to add code.',
         baseSettingTab: 'Basic settings',
         customIconFontSettingTab: 'Custom Icon Font',
         optionManagmentTab: 'Options management',
         bindingTab: 'Binding',
         coddingTab: 'Codding',
         scriptTab: 'Events/Script',
         className: 'Class Name',
         label: 'Label',
         value: 'Value',
         type: 'Type',
         buttonTypeLabel:'Type <i class="fa fa-exclamation-circle" data-toggle="tooltip" title="" data-original-title="Submit: saves all bound inputs into variable and executes all user defined actions  &nbsp; &nbsp; &nbsp; Button: only executes all user defined actions &nbsp; &nbsp; &nbsp;Reset: resets form inputs"></i>',
         accessType: 'Access',
         helpText: 'Help Text',
         idName: 'ID',
         placeholder: 'Place Holder',
         groupNameForValidation: 'Verification Group Name',
         maxlength: 'Max Length',
         pattern: 'Pattern',
         requiredName: 'Is it required?',
         hasIconFontField: 'Does it have Icon Font?',
         readOnlyField: 'Read Only Field',
         bindingMapTree: 'Save Into',
         bindingFillTree: 'Get From',
         bindingFillCombo: 'Get List From',
         expressionVisibilityCode: 'Check display function',
         bindingFillKey: 'Key Column',
         bindingFillText: 'Text Column',
         iconFontNameSelected: 'Selected Font',
         iconCustomFontNameSelected: 'Selected Custom Font',
         addOptions: 'Add Options',
         selectedFontIcon: 'Selected Icon Font',
         selectedCustomFontIcon: 'Selected Custom Icon Font',
         documentDefTree: 'Document',
         entityVariableCombo: 'Variable',
         InlineElementName: 'In Line',
         IsSwitchName: 'Switch',
         paramsTableAutoUpdate: 'Auto update',
         paramsTableControl: 'Control',
         paramsTableOperand: 'Operator',
         paramsTableParameter: 'Parameter',
         paramsTableOperation: 'Delete',
         delete: 'Delete',
         newParameter: 'Add Linked To',
         //textBoxTypes
         textBoxTypetext: 'Text',
         textBoxTypethreadTaskDescription: 'Task Description',
         textBoxTypepassword: 'Password',
         textBoxTypeemail: 'Email',
         textBoxTypecodeMeli: 'National ID',
         textBoxTypejustCharacter: 'Character',
         textBoxTypejustNumber: 'Number',
         textBoxTypepostalCode: 'Postal Code',
         textBoxTypemobile: 'Mobile',
         textBoxTypejustEnglishCharacter: 'English Character',
         textBoxTypejustPersianCharacter: 'Only Persian letters',
         textBoxTypesymbol: 'symbol',
         textBoxTypecharacterAndNumber: 'Character And Number',
         textBoxTypeMoney: 'Money',
         textBoxTypephone: 'Phone',
         textBoxTypeenCharacterAndNumber: 'English Character and Number',
         textBoxTypecodeMeliCompany: 'Company National ID',
         txtLabel: 'Caption',
         //events function
         eventTypeClick: 'Click Function',
         eventTypeChange: 'Change Function',
         eventTypeFocus: 'Focus Function',
         eventTypeBlur: 'Blur Function',
         //buttonEDitMode
         txtExpressionConfirmCode: 'Confirm Code',
         confirmText: 'confirm Text',
         btnStyle: 'Style',
         addBackendCoding: 'Design Code',
         CoddingDiv: 'Code',
         txtCallBackScript: 'Call Back Function',
         hasConfirmField: 'Does It have Confirmation?',
         hasExpressionConfirmField: 'Does It have Server Confirmation?',
         expressionConfirmText: 'Server Confirmation Text',
         hasFalseActionField: 'Can It Continue?',
         //CaptchaEditMode
         languagesGoogleCaptcha: 'Language',
         sitekeyCaptchaDiv: 'Site key',
         privatekeyCaptchaDiv: 'Private Key',
         //chartEditMode
         chartBindingFillLabelComboDiv: 'Label Source Variable',
         chartLabelDataFieldDiv: 'Label DataField',
         chartType: 'Chart Type',
         chartnewDataSet: 'New DataSet',
         chartDataSetTableDataSet: 'DataSet',
         chartDataSetTableField: 'Field',
         chartDataSetTableColour: 'Colour',
         chartDataSetTableLabel: 'Label',
         chartDataSetTableOperation: 'Operation',
         displayLegendLabel: 'Display Legend',
         smoothLabel: 'Is Smooth?',
         colorType: 'Color Type',
         colorType_Automatic: 'Automatic',
         colorType_Field: 'Field',
         colorType_List: 'List',
         chartPieColorFieldName: 'Field',
         chartNewPieChart: 'New Color',
         chartPieColorTableColour: 'Color',
         chartPieColorTableOperation: 'Delete',
         //dataGridEditMode
         dataGridColumnListName: 'Name',
         dataGridColumnListOperation: 'Delete',
         dataGridColumnListNewColumn: 'New Column',
         dataGridColumnListColumnManagement: 'Column Management',
         dataGridColumnSettingName: 'Column Name',
         dataGridColumnSettingClassName: 'Class Name',
         dataGridColumnSettingOrder: 'Order',
         dataGridColumnSettingValue: 'Value',
         dataGridColumnSettingEditValue: 'Edit',
         dataGridColumnSettingSortColumn: 'Sort Column',
         dataGridColumnSettingShowInReport: 'Show In Report',
         dataGridColumnSettingTemplateAddItem: 'New Item',
         dataGridColumnSettingTemplateType: 'Type',
         dataGridColumnSettingTemplateName: 'Name',
         dataGridColumnSettingTemplateOperation: 'Operation',
         lnkSaveAddEditDataGridColumn: 'Apply',
         lnkCancelAddEditDataGridColumn: 'Cancel',
         dataGridReportPaperSizeDiv: 'Report Paper Size',
         dataGridShowExcelDiv: 'Excel Export',
         dataGridShowPdfDiv: 'Pdf Export',
         dataGridSortTypeDiv: 'SortType',
         dataGridSortColumn: 'Sort Column',
         dataGridPageSize: 'Page Size',
         dataGridHasPaging: 'Paging?',
         dataGridAutoPagingDiv: 'AutoPaging?',
         dataGridReportHeaderDiv: 'Report Header',
         dataGridReportFooterDiv: 'Report Footer',
         dataGridReportGridHeaderColorDiv: 'Colour Of Table Header',
         dataGridReportGridFooterColorDiv: 'Colour Of Table Footer',
         dataGridReportGridEvenColorDiv: 'Color of reported even lines',
         dataGridReportGridOddColorDiv: 'Color of reported odd lines',
         dataGridReportShowDateDiv: 'Show Date',
         dataGridColumnItemRunCode: 'Action',
         dataGridColumnItemOpenForm: 'Open Form',
         dataGridColumnItemDataBound: 'Field',
         dataGridColumnItemTemlate: 'Custom',

         AddDataGridColumnItemCaption: 'Manage',
         ddlDataGridItemTypeCaption: 'Type',
         ddlDataGridItemTypeOpenForm: 'Open Form',
         ddlDataGridItemTypeRunCode: 'Run Code',
         ddlDataGridItemTypeDataBound: 'Field',
         ddlDataGridItemTypeTemplate: 'Custom Template',
         txtDataGridItemClassName: 'Link Class Name',
         txtDataGridColumnItemFieldName: 'Field',
         txtDataGridColumnItemTemplate: 'Custom Template',
         txtDataGridItemName: 'Text',
         chkDataGridItemHasExpressionConfirm: 'Server confirmation',
         txtDataGridItemExpressionConfirmText: 'Server confirmation text',
         txtDataGridItemExpressionConfirmCode: 'Submission confirmation check function',
         chkDataGridItemExpressionConfirmHasFalseAction: 'Can it continue?',
         chkDataGridItemHasConfirm: 'Does It have confirmation?',
         txtDataGridItemConfirmText: 'Confirm Text',
         ddlDataGridOpenPopUpFormId: 'Form',
         txtDataGridOpenPopUpWidth: 'Width',
         txtDataGridOpenPopUpHeight: 'Height',
         addNewRowDataGridParams: 'Add Parameter',
         addNewRowDataGridParamsTooltip: 'This parameters are sent to forms and actions and they can be used into forms and actions',
         txtDataGridRunCode: 'Code',
         tblDataGridParamsTheadValue: 'Value',
         tblDataGridParamsTheadType: 'Type',
         tblDataGridParamsTheadParameter: 'Parameter Name',
         tblDataGridParamTypeField: 'Field',
         tblDataGridParamTypeVariable: 'Variable',
         tblDataGridParamTypeStatic: 'Static',
         tblDataGridParamTypeControl: 'Control',
         //dataPickerEditMode
         datePickerDdlDtpCalType: 'Calendar Type',
         datePickerDateTime: 'DateTime',
         datePickerDate: 'Date',
         datePickerTimeType: 'Time Type',
         datePickerFormat: 'Format',
         datePickerWatchingOptions: 'Watching Options',
         datePickerAutoClose: 'Auto Close',
         datePickerJalali: 'Jalali',
         datePickerGregorian: 'Gregorian',
         //dropDownEditMode
         dropDownHasOptionalField: 'Does it have optional field?',
         dropDownOptionalCaption: 'Text of optional field',
         //FileUploaderEditMode
         fileUploaderDeleteClass: 'Delete Class Name',
         fileUploaderDownloadClass: 'Download Class Name',
         fileUploaderDeleteCaption: 'Caption Of Delete',
         fileUploaderDownloadCaption: 'Caption Of Download',
         fileUploaderAllowSelectMulitiFiles: 'Select multiple files',
         //imageEditMode
         imageSrc: 'Src',
         imageWidth: 'Width',
         imageHeigth: 'Heigth',
         //linkEditMode
         linkHrefType: 'Type of link',
         linkHref: 'Href',
         linkPopUpWidth: 'Width of popup',
         linkPopUpHeigth: 'Height of popup',
         //textboxEditMode
         inputMultiline: 'Multiline'
     },
     BpmnIO:
     {
         //Task
         Task: 'Task',
         SendTask: 'Send Task',
         ReceiveTask: 'Receive Task',
         UserTask: 'User Task',
         ManualTask: 'Manual Task',
         BusinessRuleTask: 'Business Rule Task',
         ServiceTask: 'Service Task',
         ScriptTask: 'Script Task',
         CallActivity: 'Call Activity',
         collapsedSubProcess: 'Sub Process (collapsed)',
         expandedSubProcess: 'Sub Process (expanded)',
         // StartEvent
         StartEvent: 'Start Event',
         IntermediateThrowEvent: 'Intermediate Throw Event',
         EndEvent: 'End Event',
         //INTERMEDIATE_EVENT
         MessageIntermediateCatchEvent: 'Message Intermediate Catch Event',
         MessageIntermediateThrowEvent: 'Message Intermediate Throw Event',
         TimerIntermediateCatchEvent: 'Timer Intermediate Catch Event',
         EscalationIntermediateThrowEvent: 'Escalation Intermediate Throw Event',
         ConditionalIntermediateCatchEvent: 'Conditional Intermediate Catch Event',
         LinkIntermediateCatchEvent: 'Link Intermediate Catch Event',
         LinkIntermediateThrowEvent: 'Link Intermediate Throw Event',
         CompensationIntermediateThrowEvent: 'Compensation Intermediate Throw Event',
         SignalIntermediateCatchEvent: 'Signal Intermediate Catch Event',
         SignalIntermediateThrowEvent: 'Signal Intermediate Throw Event',
         //END_EVENT
         IntermediateEvent: 'Intermediate Event',
         MessageEndEvent: 'Message End Event',
         EscalationEndEvent: 'Escalation End Event',
         ErrorEndEvent: 'Error End Event',
         CancelEndEvent: 'Cancel End Event',
         CompensationEndEvent: 'Compensation End Event',
         SignalEndEvent: 'Signal End Event',
         TerminateEndEvent: 'Terminate End Event',
         //GATEWAY
         ExclusiveGateway: 'Exclusive Gateway',
         ParallelGateway: 'Parallel Gateway',
         InclusiveGateway: 'Inclusive Gateway',
         ComplexGateway: 'Complex Gateway',
         EventbasedGateway: 'Event based Gateway',
         //SUBPROCESS_EXPANDED
         Transaction: 'Transaction',
         EventSubProcess: 'Event Sub Process',
         SubProcessCollapsed: 'Sub Process (collapsed)',
         //TRANSACTION
         SubProcess: 'Sub Process',
         //BOUNDARY_EVENT
         MessageBoundaryEvent: 'Message Boundary Event',
         TimerBoundaryEvent: 'Timer Boundary Event',
         EscalationBoundaryEvent: 'Escalation Boundary Event',
         ConditionalBoundaryEvent: 'Conditional Boundary Event',
         ErrorBoundaryEvent: 'Error Boundary Event',
         CancelBoundaryEvent: 'Cancel Boundary Event',
         SignalBoundaryEvent: 'Signal Boundary Event',
         CompensationBoundaryEvent: 'Compensation Boundary Event',
         MessageBoundaryEventnoninterrupting: 'Message Boundary Event (non-interrupting)',
         TimerBoundaryEventnoninterrupting: 'Timer Boundary Event (non-interrupting)',
         EscalationBoundaryEventnoninterrupting: 'Escalation Boundary Event (non-interrupting)',
         ConditionalBoundaryEventnoninterrupting: 'Conditional Boundary Event (non-interrupting)',
         SignalBoundaryEventnoninterrupting: 'Signal Boundary Event (non-interrupting)',
         //EVENT_SUB_PROCESS_START_EVENT
         MessageStartEvent: 'Message Start Event',
         TimerStartEvent: 'Timer Start Event',
         ConditionalStartEvent: 'Conditional Start Event',
         SignalStartEvent: 'Signal Start Event',
         ErrorStartEvent: 'Error Start Event',
         EscalationStartEvent: 'Escalation Start Event',
         CompensationStartEvent: 'Compensation Start Event',
         MessageStartEventnoninterrupting: 'Message Start Event (non-interrupting)',
         TimerStartEventnoninterrupting: 'Timer Start Event (non-interrupting)',
         ConditionalStartEventnoninterrupting: 'Conditional Start Event (non-interrupting)',
         SignalStartEventnoninterrupting: 'Signal Start Event (non-interrupting)',
         EscalationStartEventnoninterrupting: 'Escalation Start Event (non-interrupting)',
         //SEQUENCE_FLOW
         SequenceFlow: 'Sequence Flow',
         DefaultFlow: 'Default Flow',
         ConditionalFlow: 'Conditional Flow',
         //PARTICIPANT
         ExpandedPool: 'Expanded Pool',
         CollapsedPool: 'Collapsed Pool',
         //
         Appendcompensationactivity: 'Append compensation activity',
         AppendReceiveTask: 'Append Receive Task',
         AppendMessageIntermediateCatchEvent: 'Append Message Intermediate Catch Event',
         AppendTimerIntermediateCatchEvent: 'Append Timer Intermediate Catch Event',
         AppendConditionIntermediateCatchEvent: 'Append Condition Intermediate Catch Event',
         AppendSignalIntermediateCatchEvent: 'Append Signal Intermediate Catch Event',
         AppendEndEvent: 'Append End Event',
         AppendGateway: 'Append Gateway',
         AppendTask: 'Append Task',
         AppendIntermediateBoundaryEvent: 'Append Intermediate Boundary Event'
     }
};
export default langEn;